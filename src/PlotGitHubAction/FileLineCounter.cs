using System;
using System.IO;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;

namespace PlotGitHubAction;


public class FileLineCounter {
    private readonly ActionConfig _config;
    private readonly string       _directoryRoot;
    public readonly  string       MarkdownOutputPath;

    private const    string                  _line_count_history_filename      = "line_count_history";
    public const     string                  LINE_COUNT_HISTORY_TOTAL_FILENAME = "line_count_total_history";
    private readonly Dictionary<string, int> _projectFileCounts                = new ();
    private readonly Dictionary<string, int> _noProjectFileCounts              = new ();
    private readonly JsonHistoryPlotter      _historyPlotter;
    private          string                  _lineCountFilePattern => _config.LineCountFilePattern;

    public FileLineCounter( ActionConfig config ) {
        _config            = config;
        _directoryRoot     = config.SourceScanDir!;
        MarkdownOutputPath = Path.Combine( config.OutputDir, "Line_Counts.md" );
        _historyPlotter = new JsonHistoryPlotter(
            jsonHistoryPath: Path.Combine( config.LineCountHistoryOutputDir, "line_count_history.json" )
        );
        System.IO.Directory.CreateDirectory( config.LineCountHistoryOutputDir );
        System.IO.Directory.CreateDirectory( config.OutputDir );
    }

    public void Analyze( ) {
        Log.Info( $"==== {nameof(FileLineCounter)}.{nameof(Analyze)} ====\n\tScanning: {_directoryRoot}" );
        foreach ( var filePath in System.IO.Directory.EnumerateFiles( _directoryRoot, "*", System.IO.SearchOption.AllDirectories ) ) {
            Log.Verbose( $"Scanning file: {filePath}" );
            if ( Regex.IsMatch( filePath, _lineCountFilePattern ) ) {
                if ( System.IO.File.ReadAllLines( filePath ) is var lines and not [ "// <auto-generated />", .. ] ) {
                    int  numLines     = lines.Length;
                    bool projectFound = false;
                    foreach ( var csProjInfo in _config.GetCsProjectsCopy() ) {
                        if ( csProjInfo.ContainsFile( filePath ) ) {
                            _projectFileCounts.TryAdd( csProjInfo.ProjectName, 0 );
                            _projectFileCounts[ csProjInfo.ProjectName ] += numLines;
                            projectFound                                 =  true;
                            break;
                        }
                    }
                    if ( !projectFound ) {
                        Log.Debug( $"No matching project for {filePath}" );
                        _noProjectFileCounts[ filePath ] = numLines;
                    }
                    Log.Verbose( $"Found {numLines} lines in: {filePath}" );
                    continue;
                }
                Log.Verbose( $"Skipping auto generated file for line counts: {filePath}" );
            }
        }
        foreach ( var proj in _projectFileCounts ) {
            Log.Debug( $"{proj}: {proj.Value} lines" );
        }
        Dictionary<string, int> stats;
        try {
            stats = _projectFileCounts.OrderByDescending( p => p.Value )
                                      .ToDictionary(
                                          p => p.Key,
                                          v => v.Value
                                      );
        } catch ( Exception ) {
            Log.Error( "Error marshaling stats" );
            Log.Error( String.Join( "\n", _projectFileCounts ) );
            throw;
        }
        stats.Add( "Outside Project", _noProjectFileCounts.Values.Sum() );
        //
        _historyPlotter.AddToHistory( stats );
        stats[ "Total" ] = stats.Values.Sum();
        outputMarkdown( stats );
    }

    private void outputMarkdown( Dictionary<string, int> stats ) {
        const int col1Width = 40;
        var       sb        = new StringBuilder( "# Line Counts" );
        sb.AppendLine();
        sb.AppendLine();
        sb.AppendLine( _config.GetMarkdownChartLink( LINE_COUNT_HISTORY_TOTAL_FILENAME ) );
        sb.AppendLine();
        sb.AppendLine( _config.GetMarkdownChartLink( _line_count_history_filename ) );
        sb.AppendLine();
        sb.AppendLine();
        sb.AppendLine($"Using file pattern: `{_config.LineCountFilePattern}`");
        sb.AppendLine();
        
        
        sb.AppendLine( "Project".PadRight( col1Width )        + " | Line Count" );
        sb.AppendLine( String.Empty.PadLeft( col1Width, '-' ) + "-|-" + String.Empty.PadLeft( 20, '-' ) );
        foreach ( var (project, lineCount) in stats ) {
            string boldWrap = project == "Total" ? "**" : String.Empty;
            sb.AppendLine(
                ( boldWrap + project + boldWrap ).PadRight( col1Width )
                + $" | {boldWrap}{lineCount:n0}{boldWrap}" );
        }
        sb.AppendLine();

        Log.Debug( sb.ToString() );
        System.IO.File.WriteAllText( MarkdownOutputPath, sb.ToString() );
    }

    public XYPlotConfig<DateTime>[] GetPlottable( ) {
        return new[] {
            _historyPlotter.AddDataToPlottable(
                new XYPlotConfig<DateTime>(
                    Title: "Line Count",
                    OutputFileName: _line_count_history_filename,
                    PlotType: PlotType.Scatter,
                    Width: 1024,
                    Height: 800,
                    XAxisType: AxisType.DateTime,
                    YAxisType: AxisType.Numeric,
                    Data: Array.Empty<XYData<DateTime>>()
                ), PlotDataSelection.Projects ),
            _historyPlotter.AddDataToPlottable(
                new XYPlotConfig<DateTime>(
                    Title: "Line Count Total",
                    OutputFileName: LINE_COUNT_HISTORY_TOTAL_FILENAME,
                    PlotType: PlotType.Scatter,
                    Width: 1024,
                    Height: 800,
                    XAxisType: AxisType.DateTime,
                    YAxisType: AxisType.Numeric,
                    Data: Array.Empty<XYData<DateTime>>()
                ), PlotDataSelection.Total )
        };
    }
}